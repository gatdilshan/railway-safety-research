===================================================================================
                    RAILWAY COLLISION DETECTION SYSTEM
                           Architecture Diagram
===================================================================================

                            ┌─────────────────────┐
                            │   actual train      │
                            │   line 1 data.csv   │
                            │   (190 GPS Points)  │
                            └──────────┬──────────┘
                                       │ Load on startup
                                       ▼
┌────────────────┐         ┌───────────────────────┐         ┌────────────────┐
│  ESP32_GPS_01  │         │                       │         │  ESP32_GPS_02  │
│  TRAIN_01      │◀───────▶│   FastAPI Server      │◀───────▶│  TRAIN_02      │
│                │  WiFi   │   (server.py)         │  WiFi   │                │
│ ┌────────────┐ │         │                       │         │ ┌────────────┐ │
│ │ NEO-M8N    │ │         │  ┌─────────────────┐  │         │ │ NEO-M8N    │ │
│ │ GPS Module │ │         │  │  Track Matching │  │         │ │ GPS Module │ │
│ └────────────┘ │         │  │   Algorithm     │  │         │ └────────────┘ │
│       │        │         │  └─────────────────┘  │         │       │        │
│       ▼        │         │           │           │         │       ▼        │
│ ┌────────────┐ │         │           ▼           │         │ ┌────────────┐ │
│ │  Kalman    │ │         │  ┌─────────────────┐  │         │ │  Kalman    │ │
│ │  Filter    │ │         │  │  Track Locking  │  │         │ │  Filter    │ │
│ └────────────┘ │         │  │   Management    │  │         │ └────────────┘ │
│       │        │         │  └─────────────────┘  │         │       │        │
│       ▼        │         │           │           │         │       ▼        │
│  Send GPS Data─┼────────▶│           ▼           │◀────────┼─Send GPS Data  │
│  15 sec/point  │         │  ┌─────────────────┐  │         │ 15 sec/point   │
│                │         │  │   Collision     │  │         │                │
│  Poll Status   │         │  │   Detection     │  │         │  Poll Status   │
│  Every 5 sec ──┼────────▶│  └─────────────────┘  │◀────────┼──Every 5 sec   │
│                │         │           │           │         │                │
│ ┌────────────┐ │         │           ▼           │         │ ┌────────────┐ │
│ │   Buzzer   │ │         │  ┌─────────────────┐  │         │ │   Buzzer   │ │
│ │   (GPIO23) │ │◀────────┼──│  Activate Both  │──┼────────▶│ │   (GPIO23) │ │
│ └────────────┘ │         │  │    Buzzers      │  │         │ └────────────┘ │
│       ▲        │         │  └─────────────────┘  │         │       ▲        │
│       │        │         │                       │         │       │        │
└───────┼────────┘         └───────────┬───────────┘         └───────┼────────┘
        │                              │                             │
        └─────── COLLISION ALERT! ─────┴─────── COLLISION ALERT! ────┘
                  🚨 Both Buzzers ON 🚨

                                       │
                                       ▼
                            ┌─────────────────────┐
                            │   MongoDB Atlas     │
                            │                     │
                            │  ┌───────────────┐  │
                            │  │  gpsdata      │  │
                            │  └───────────────┘  │
                            │  ┌───────────────┐  │
                            │  │ train_details │  │
                            │  └───────────────┘  │
                            │  ┌───────────────┐  │
                            │  │track_sections │  │
                            │  └───────────────┘  │
                            │  ┌───────────────┐  │
                            │  │ track_locks   │  │
                            │  └───────────────┘  │
                            │  ┌───────────────┐  │
                            │  │   sessions    │  │
                            │  └───────────────┘  │
                            └─────────────────────┘

===================================================================================
                            COLLISION DETECTION FLOW
===================================================================================

Step 1: TRAIN_01 Enters Track
─────────────────────────────────────────────────────────────────────────────
ESP32_GPS_01 sends:  6.5780798, 79.9621372
                              │
                              ▼
Server calculates distance to all track points
                              │
                              ▼
Closest point found: 12.5m away (< 30m threshold)
                              │
                              ▼
Match Counter: 1 → 2 → 3 → 4 → 5 consecutive matches
                              │
                              ▼
        🔒 TRACK LOCKED to TRAIN_01
                              │
                              ▼
        Database Update:
        - track_locks: {train_id: "TRAIN_01", device_id: "ESP32_GPS_01", locked: true}
        - train_details: {active: true, current_track: "track_01"}


Step 2: TRAIN_02 Enters Same Track
─────────────────────────────────────────────────────────────────────────────
ESP32_GPS_02 sends:  6.5784595, 79.9619199
                              │
                              ▼
Server calculates distance to track points
                              │
                              ▼
Closest point found: 15.2m away (< 30m threshold)
                              │
                              ▼
Match Counter: 1 → 2 → 3 → 4 → 5 consecutive matches
                              │
                              ▼
        🔒 TRACK LOCKED to TRAIN_02
                              │
                              ▼
        Collision Detection:
        - Query track_locks for track_01
        - Found 2 locks: TRAIN_01 and TRAIN_02
                              │
                              ▼
        🚨 COLLISION DETECTED!
                              │
                              ▼
        Database Update:
        - TRAIN_01: {collision_detected: true, collision_with: ["TRAIN_02"]}
        - TRAIN_02: {collision_detected: true, collision_with: ["TRAIN_01"]}


Step 3: Buzzer Activation
─────────────────────────────────────────────────────────────────────────────
ESP32_GPS_01 polls status (every 5 seconds)
                              │
                              ▼
GET /api/train/status?device_id=ESP32_GPS_01
                              │
                              ▼
Response: {active: true, collision_detected: true}
                              │
                              ▼
        🔊 BUZZER ON (GPIO23 HIGH)
        💡 LED ON (GPIO22 HIGH)

        
ESP32_GPS_02 polls status (every 5 seconds)
                              │
                              ▼
GET /api/train/status?device_id=ESP32_GPS_02
                              │
                              ▼
Response: {active: true, collision_detected: true}
                              │
                              ▼
        🔊 BUZZER ON (GPIO23 HIGH)
        💡 LED ON (GPIO22 HIGH)

===================================================================================
                            API ENDPOINTS OVERVIEW
===================================================================================

GPS Data
────────
POST /api/gps                          # Receive GPS data from ESP32
  ├── Check track matching
  ├── Update consecutive match counter
  ├── Lock track if 5 matches
  ├── Detect collision if multiple locks
  └── Return: {track_match: {...}, collision: {...}}

Train Status
────────────
GET  /api/train/status                 # Get all trains
GET  /api/train/status?device_id=X     # Get specific train by device
GET  /api/train/status?train_id=X      # Get specific train by train ID
POST /api/train/status                 # Update train status (manual)

Track Management
────────────────
GET  /api/tracks                       # List all track sections
GET  /api/tracks/{track_id}/status     # Get track lock status
POST /api/tracks/reset                 # Reset all locks (testing)

Simulation
──────────
POST /api/simulate/gps                 # Simulate GPS points
  Body: {device_id, track_id, start_index, num_points}
  
GET  /api/simulate/scenario/collision  # Full collision test
  ├── Reset system
  ├── Simulate TRAIN_01 (20 points)
  ├── Simulate TRAIN_02 (overlapping)
  └── Return collision status

===================================================================================
                            CONFIGURATION PARAMETERS
===================================================================================

GPS_MATCH_THRESHOLD_METERS = 30.0
  ↳ How close GPS must be to track point to match (meters)
  ↳ Lower = more strict, Higher = more lenient

REQUIRED_CONSECUTIVE_MATCHES = 5
  ↳ How many consecutive matches needed to lock track
  ↳ Lower = faster lock, Higher = more reliable

GPS_BUFFER_SIZE = 10
  ↳ Number of recent GPS points to keep in memory

TRAIN_STATUS_CHECK_INTERVAL = 5000
  ↳ How often ESP32 checks status (milliseconds)

PRINT_INTERVAL_MS = 15000
  ↳ How often ESP32 sends GPS data (milliseconds)

===================================================================================
                            SUCCESS INDICATORS
===================================================================================

✅ Server Startup:
   - "✅ Connected to MongoDB"
   - "✅ Loaded track data: 190 GPS points"
   - "🛤️  Collision Detection System Active"

✅ GPS Matching:
   - "✅ Track match: consecutive=1" ... "consecutive=5"
   - "🔒 Track track_01 locked by TRAIN_XX"

✅ Collision Detection:
   - "🚨 COLLISION DETECTED on track_01!"
   - "   Trains involved: ['TRAIN_01', 'TRAIN_02']"

✅ ESP32 Device:
   - "🚂 Train Status: ACTIVE"
   - "🚨 COLLISION DETECTED! ⚠️⚠️⚠️"
   - "🔊 BUZZER ACTIVATED - COLLISION WARNING!"

===================================================================================
                            QUICK TEST COMMANDS
===================================================================================

# Start Server
python server.py

# Test Collision (One Command!)
curl http://localhost:8000/api/simulate/scenario/collision

# Expected Response:
{
  "collision_detected": true,
  "train1": {"active": true, "collision_detected": true},
  "train2": {"active": true, "collision_detected": true}
}

# Check Track Status
curl http://localhost:8000/api/tracks/track_01/status

# Expected Response:
{
  "locked": true,
  "lock_count": 2,
  "collision_risk": true
}

# Reset System
curl -X POST http://localhost:8000/api/tracks/reset

===================================================================================

